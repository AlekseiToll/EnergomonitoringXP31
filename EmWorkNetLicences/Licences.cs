using System;
using System.Collections.Generic;
using System.Text;
using System.Security.Cryptography;
using System.Security.Permissions;
using System.IO;
using System.Xml.Serialization;

namespace EmWorkNetLicences
{
	[Serializable]
	public class Licences
	{
		#region Private const slicence
		private byte[] slicence = { 0x5d, 0x5f, 0x8d, 0x96, 0xce, 0x58, 0xab, 0xe, 0x52, 0x8d, 0xd2, 0x95, 0x61, 0x79, 0xf6, 0x3e, 0x3f, 0x5a, 0xff, 0x2b, 0x5f, 0x89, 0x38, 0xec, 0x78, 0x94, 0x1e, 0xa9, 0x34, 0x50, 0x7e, 0x68, 0xc9, 0x3c, 0xa5, 0x35, 0x78, 0x87, 0x6b, 0x4a, 0xe, 0xc8, 0x80, 0x54, 0x3b, 0xda, 0xdd, 0x63, 0x14, 0xcc, 0xcf, 0xf8, 0x73, 0x94, 0x9d, 0x5f, 0x16, 0x6f, 0x19, 0x58, 0x4d, 0x8b, 0xef, 0xb1, 0x34, 0x24, 0xcb, 0xd2, 0x65, 0xc8, 0x82, 0x31, 0xe3, 0xaf, 0xe6, 0x67, 0xeb, 0xad, 0x4b, 0x6e, 0x2f, 0x27, 0x7e, 0x41, 0xa7, 0xa9, 0x7d, 0x81, 0xad, 0xa3, 0xa2, 0xc9, 0xce, 0x83, 0x21, 0xe, 0x9a, 0x50, 0x11, 0x3d, 0xc2, 0xa4, 0x23, 0xb4, 0x21, 0x49, 0x6c, 0x75, 0xdb, 0x59, 0x61, 0x20, 0xa5, 0xa1, 0xbc, 0x92, 0xb7, 0xe5, 0xb4, 0x19, 0x36, 0xa7, 0xf5, 0xfa, 0x36, 0xba, 0x75, 0x2f };
		#endregion

		#region Fields

		private string NumberFormat = "00000000";

		private List<byte[]> deviceLicences = new List<byte[]>();

		#endregion

		#region Properties

		public List<byte[]> DeviceLicences { get { return deviceLicences; } }

		/// <summary>Gets licences count</summary>
		public int Count {get { return deviceLicences.Count;}}
		
		/// <summary>Gets serial numbers of licenced devices</summary>
		public string[] LicencedDevices
		{
			get
			{
				if (deviceLicences.Count == 0) return null;

				UnicodeEncoding ByteConverter = new UnicodeEncoding();
				string[] res = new string[deviceLicences.Count];
				byte[] decryptedData;
				try
				{
					for (int i = 0; i < deviceLicences.Count; i++)
					{
						decryptedData = RSADecrypt(deviceLicences[i], Licences.RSAKeyInfo, false);
						res[i] = ByteConverter.GetString(decryptedData);
					}
				}
				catch (CryptographicException)
				{
					return null;
				}

				return res;
			}
		}

		#endregion

		#region Public methods

		/// <summary>
		/// Device licence check
		/// </summary>
		/// <param name="device">Device serial number</param>
		/// <returns><c>true</c> if device licenced or <c>false</c></returns>
		public bool IsLicenced(long device)
		{
			string[] dev = this.LicencedDevices;
			if (dev == null) return false;
			if (dev.Length == 0) return false;

			for (int i = 0; i < dev.Length; i++)
			{
				if (Convert.ToInt64(dev[i]) == device || Convert.ToInt64(dev[i]) == 00000000)
				{
					return true;
				}
			}
			return false;
		}

		/// <summary>
		/// Add device licence
		/// </summary>
		/// <param name="device">Device serial number</param>
		/// <returns><c>true</c> if device licenced or <c>false</c></returns>
		public bool AddLiñence(long device)
		{
			UnicodeEncoding ByteConverter = new UnicodeEncoding();
			byte[] dataToEncrypt = ByteConverter.GetBytes(device.ToString(this.NumberFormat));
			byte[] encryptedData;

			try
			{
				encryptedData = Licences.RSAEncrypt(dataToEncrypt, Licences.RSAKeyInfo, false);
			}
			catch (ArgumentNullException)
			{
				return false;
			}
			deviceLicences.Add(encryptedData);
			return true;
		}

		/// <summary>
		/// Serialize object to the file stream
		/// </summary>
		/// <param name="filename"></param>
		/// <returns></returns>
		public bool SaveLicences(string filename)
		{
			bool result = false;

			StreamWriter myWriter = null;
			XmlSerializer mySerializer = null;
			try
			{
				// Create an XmlSerializer for the 
				// ApplicationSettings type.
				mySerializer = new XmlSerializer(typeof(Licences));
				myWriter = new StreamWriter(filename, false);
				// Serialize this instance of the ApplicationSettings 
				// class to the config file.
				mySerializer.Serialize(myWriter, this);	
				result = true;
			}
			catch
			{
				return false;
			}
			finally
			{
				// If the FileStream is open, close it.
				if (myWriter != null)
				{
					myWriter.Close();
				}
			}

			return result;
		}

		/// <summary>
		/// Deserialize object from the file stream
		/// </summary>
		/// <param name="filename">File name of licence</param>
		/// <returns></returns>
		public string[] LoadLicences(string[] filenames)
		{
			XmlSerializer mySerializer = null;
			FileStream myFileStream = null;
			List<string> result = new List<string>();

			try
			{
				for (int iFile = 0; iFile < filenames.Length; ++iFile)
				{
					// Create an XmlSerializer for the ApplicationSettings type.
					mySerializer = new XmlSerializer(typeof(Licences));
					FileInfo fi = new FileInfo(filenames[iFile]);
					// If the config file exists, open it.
					if (fi.Exists)
					{
						myFileStream = fi.OpenRead();
						// Create a new instance of the ApplicationSettings by
						// deserializing the config file.
						Licences mylicence = (Licences)mySerializer.Deserialize(myFileStream);
						// Assign the property values to this instance of 
						// the ApplicationSettings class.
						result.AddRange(mylicence.LicencedDevices);
					}
				}
			}
			catch (Exception e)
			{
				string m = e.Message;
				//System.Diagnostics.Debug.WriteLine("can't load data frim file \"settings.xml\"", "Settings");
			}
			finally
			{
				// If the FileStream is open, close it.
				if (myFileStream != null)
				{
					myFileStream.Close();
				}
			}
			return result.ToArray();
		}


		/// <summary>
		/// Remove device from licenced list
		/// </summary>
		/// <param name="device">Device serial number</param>
		/// <returns></returns>
		public bool DropLicence(long device)
		{
			string[] dev = this.LicencedDevices;
			if (dev == null) return false;
			if (dev.Length == 0) return false;

			for (int i = 0; i < dev.Length; i++)
			{
				if (Convert.ToInt64(dev[i]) == device)
				{
					deviceLicences.RemoveAt(i);
					return true;
				}
			}
					
			return false;
		}

		#endregion		

		#region Private RSA methods and properties

		static private byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
		{
			try
			{
				RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
				RSA.ImportParameters(RSAKeyInfo);
				return RSA.Encrypt(DataToEncrypt, DoOAEPPadding);
			}
			catch (CryptographicException e)
			{
				Console.WriteLine(e.Message);
				return null;
			}

		}

		static private byte[] RSADecrypt(byte[] DataToDecrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
		{
			try
			{
				RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
				RSA.ImportParameters(RSAKeyInfo);
				return RSA.Decrypt(DataToDecrypt, DoOAEPPadding);
			}
			catch (CryptographicException
				//ex
				)
			{
				return null;
			}

		}

		/// <summary>Gets RSA private and pubilc key</summary>
		static private RSAParameters RSAKeyInfo
		{
			get
			{
				#region RSA key
				byte[] D = { 0xc1, 0x46, 0x8, 0x65, 0xbd, 0x73, 0x79, 0xf2, 0xe0, 0x61, 0xe6, 0xe1, 0xab, 0x13, 0x35, 0x67, 0x6b, 0xe5, 0x4f, 0x5e, 0xf, 0xe6, 0x87, 0x6f, 0x81, 0x82, 0x8a, 0x6d, 0xeb, 0xea, 0x3a, 0xb5, 0x79, 0xe0, 0x33, 0xfa, 0x8c, 0xd7, 0xb5, 0x7, 0xc0, 0x7b, 0x88, 0x23, 0xc7, 0x7a, 0xeb, 0xb9, 0xe9, 0x77, 0xc4, 0x7d, 0x62, 0x93, 0x46, 0x26, 0xfc, 0x5, 0xcf, 0x7a, 0xc8, 0xdd, 0x84, 0xe5, 0xef, 0x98, 0xc8, 0x28, 0xe7, 0x52, 0xc8, 0x8, 0xe4, 0xcb, 0xa, 0xd1, 0x2, 0x30, 0x9a, 0x5b, 0x35, 0xc, 0x60, 0xfd, 0xfa, 0x44, 0x3c, 0x61, 0xca, 0x9, 0x8d, 0x92, 0x7e, 0xe0, 0x60, 0xbc, 0x7c, 0xae, 0x9a, 0x78, 0x13, 0x78, 0x37, 0xe1, 0xc0, 0x51, 0xd0, 0x59, 0xc9, 0xae, 0x2b, 0x77, 0x6f, 0x79, 0x71, 0x91, 0x72, 0xd7, 0x1d, 0xa, 0xf0, 0x7e, 0x38, 0xa8, 0x48, 0xa9, 0x90, 0xa9 };
				byte[] DP = { 0x77, 0xa8, 0xcc, 0x73, 0xb, 0xb0, 0xe9, 0x6c, 0xfb, 0xe5, 0x55, 0xde, 0x51, 0x3d, 0x8d, 0x99, 0x41, 0xd5, 0x2f, 0x3c, 0xab, 0x1f, 0xce, 0x44, 0xba, 0x94, 0xa1, 0xb1, 0x54, 0x63, 0xa0, 0xa8, 0x5f, 0xa2, 0x32, 0x8e, 0xc, 0x1d, 0xb4, 0xfe, 0x82, 0x27, 0x45, 0xa5, 0x7d, 0x2b, 0x5, 0x6, 0xc7, 0xe4, 0x6f, 0x7e, 0x4e, 0xbc, 0x35, 0x10, 0x4e, 0x7e, 0x8e, 0x17, 0xe9, 0xb2, 0x33, 0x29 };
				byte[] DQ = { 0xb1, 0xaa, 0xeb, 0xf6, 0x96, 0x90, 0xa6, 0x17, 0x4, 0xc6, 0x4d, 0xeb, 0x51, 0xb3, 0xcf, 0xc1, 0x49, 0x11, 0x82, 0x28, 0xf5, 0x9f, 0xd, 0x46, 0x2c, 0x43, 0xfc, 0x9d, 0x4f, 0xf5, 0x67, 0x2a, 0x35, 0x27, 0xe6, 0x5c, 0x6a, 0xc3, 0x4, 0x99, 0x5f, 0x2b, 0x6b, 0xc5, 0x14, 0x2f, 0xbc, 0x2e, 0x85, 0x59, 0x5c, 0x7e, 0xa8, 0x9e, 0xe0, 0xd4, 0xb9, 0x70, 0xc6, 0xf3, 0x40, 0xce, 0x87, 0xbb };
				byte[] Exponent = { 0x1, 0x0, 0x1 };
				byte[] InverseQ = { 0x69, 0x28, 0x9e, 0x8e, 0xef, 0xb1, 0xcf, 0xfe, 0x25, 0xc9, 0x82, 0x83, 0x2a, 0xe8, 0x40, 0x5e, 0x5f, 0x2b, 0x71, 0x69, 0xb3, 0xa6, 0x92, 0x78, 0x27, 0x1c, 0x5, 0x7f, 0x48, 0xe, 0xe7, 0xd7, 0x8, 0xb8, 0xf0, 0xa0, 0x17, 0x68, 0xcd, 0x3c, 0x70, 0xde, 0x60, 0x7a, 0x8c, 0xa3, 0x1a, 0xc, 0x6, 0xb1, 0xe, 0x2d, 0xeb, 0x31, 0xa, 0x30, 0x46, 0xab, 0x2c, 0xaa, 0xdb, 0x3b, 0x95, 0x94 };
				byte[] Modulus = { 0xcd, 0x6e, 0xc5, 0xb2, 0x95, 0x17, 0xbc, 0xff, 0x5e, 0xca, 0xba, 0x45, 0x47, 0x6c, 0xdb, 0x7f, 0xb1, 0xaa, 0x11, 0x89, 0x0, 0xa4, 0x50, 0x70, 0x92, 0x39, 0x18, 0xdf, 0x3b, 0xfe, 0xff, 0x71, 0x42, 0x47, 0xb8, 0x4c, 0x99, 0x2a, 0x7b, 0x68, 0xec, 0xf9, 0xd, 0x5f, 0xea, 0x9a, 0x94, 0xe0, 0xf, 0x5a, 0x3f, 0xc, 0x3a, 0x4b, 0xc0, 0x3c, 0x54, 0xe, 0x19, 0x10, 0x44, 0xca, 0x5f, 0x66, 0x4b, 0xa0, 0x8e, 0xdc, 0x6e, 0x53, 0x30, 0xb6, 0xc8, 0x67, 0xb0, 0x5e, 0x3f, 0xb9, 0x38, 0xa7, 0x97, 0xde, 0x2, 0xcd, 0x1e, 0x43, 0x10, 0x53, 0xcb, 0xfa, 0x55, 0xcc, 0x2e, 0x92, 0x6e, 0x43, 0x68, 0xc9, 0x32, 0x3a, 0xd1, 0xb8, 0x7f, 0x45, 0x6a, 0x3b, 0x3d, 0x85, 0x5, 0x2, 0xa2, 0xb0, 0x6a, 0x60, 0xfb, 0x8d, 0x74, 0xd8, 0x44, 0xfb, 0xb9, 0x81, 0xf4, 0xc4, 0xbe, 0x7d, 0xf9, 0xb9 };
				byte[] P = { 0xe6, 0x30, 0xa9, 0xf9, 0x63, 0x6e, 0x14, 0x3e, 0x32, 0xef, 0x54, 0xd1, 0xda, 0xe0, 0xc2, 0xf1, 0xb7, 0xe9, 0xb, 0x49, 0x16, 0x6d, 0x2d, 0xee, 0x92, 0xb0, 0xe4, 0x0, 0x49, 0x41, 0xe4, 0xdb, 0xa9, 0xa2, 0x4c, 0xc, 0x22, 0x1d, 0xb, 0x3e, 0x3e, 0x24, 0x6d, 0xa0, 0x23, 0x3b, 0x33, 0x24, 0x32, 0x38, 0x62, 0x20, 0xde, 0x9f, 0xfe, 0xa6, 0xb9, 0xce, 0x9e, 0xb1, 0x37, 0xb6, 0x65, 0x43 };
				byte[] Q = { 0xe4, 0x77, 0x79, 0xfe, 0x12, 0xe4, 0x95, 0x1a, 0x4a, 0x3c, 0xc3, 0x29, 0xf4, 0xa7, 0x50, 0xb3, 0x6d, 0x7b, 0x41, 0xc2, 0x58, 0x8e, 0x77, 0xe8, 0xe, 0xcc, 0x79, 0xf, 0xe9, 0x30, 0x5a, 0x40, 0x96, 0x8a, 0x9f, 0xb4, 0x60, 0xe6, 0xe5, 0x86, 0x82, 0xdf, 0xe9, 0x94, 0x60, 0x34, 0xa4, 0xba, 0x33, 0xc9, 0x7f, 0xc2, 0xf2, 0x2, 0x2a, 0xcd, 0xf2, 0x55, 0xb4, 0x90, 0x5c, 0x83, 0x77, 0x53 };
				#endregion

				RSAParameters rsaKey = new RSAParameters();
				rsaKey.D = D;
				rsaKey.DP = DP;
				rsaKey.DQ = DQ;
				rsaKey.Exponent = Exponent;
				rsaKey.InverseQ = InverseQ;
				rsaKey.Modulus = Modulus;
				rsaKey.P = P;
				rsaKey.Q = Q;
				return rsaKey;
			}
		}	

		#endregion
	}
}
